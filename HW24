class Node:
    def __init__(self, data):
        self.data = data
        self.next = None
class linkedList:
    def __init__(self):
        self.head = None
        
    def append(self, data):
        newNode = Node(data)
        if self.head == None:
            self.head = newNode
            return
        else:
            curNode = self.head
            while curNode.next != None:
                curNode = curNode.next
            curNode.next = newNode
            
    def printList(self):
        curNode = self.head
        while curNode is not None:
            print(curNode.data)
            curNode = curNode.next
            
    def deleteNode(self, key):
         curNode = self.head
         if curNode != None and curNode.data == key:
             self.head = curNode.next
             curNode = None
             return
         else:
             prev = None
             while curNode != None and curNode.data != key:
                 prev = curNode
                 curNode = curNode.next
             if curNode == None:
                print("The data is not found in the list")
                return
             else:
                prev.next = curNode.next
                curNode = None
        
    def remove_duplicate(self):
        curNode = self.head
        prev = None
        temp = dict()
        while curNode is not None:
            if curNode.data not in temp:
                temp[curNode.data] = 1
                prev = curNode
                curNode = curNode.next
            else:
               prev.next = curNode.next
               curNode = None
        curNode = prev.next
        
    def print_nth_from_list(self, n):
        curNode = self.head
        n = n - 1
        count = 0
        while curNode is not None and count < n:
            curNode = curNode.next
            count += 1
        if curNode == None:
            print(n + 1, "exceeds list length")
        elif count == n:
            print(curNode.data)
            
    def len_iterative(self):
        curNode = self.head
        count = 0
        while curNode != None:
            curNode = curNode.next
            count += 1 
        return count
    def occurences(self, data):
        curNode = self.head
        count = 0
        while curNode is not None:
            if curNode.data == data:
                count += 1
                curNode = curNode.next
            else:
                curNode = curNode.next
            return count
#         
    def rotate(self, k):
        p = self.head
        q = self.head
        prev = None
        cnt = 0
        while p != None and cnt < k:
            prev = p
            p = p.next
            cnt +=1
        p = prev
        if p == None:
            print(k, "is greater than list length")
        cnt = 0
        while q is not None:
            prev = q
            q = q.next
            
        q = prev
        q.next = self.head
        self.head = p.next
        p.next = None
       
        
    def tail_to_head(self):
        lastNode = self.head
        secondLast = None
        while lastNode.next != None:
            secondLast = lastNode
            lastNode = lastNode.next
        lastNode.next = self.head
        self.head = lastNode
        secondLast.next = None
        
        
myList = linkedList()
myList.append(5)
myList.append("Steve")
myList.append("This is my List")
myList.append("Steve")
myList.deleteNode(5)
myList.remove_duplicate()
print("Remove Duplicate Test:")
myList.printList()
print('\n')
print("print_nth_from_list Test:")
myList.print_nth_from_list(2)
print('\n')
print("len_iterative Test:")
print(myList.len_iterative())
print('\n')
print("Occurances Test:")
print(myList.occurences("This is my List"))
print('\n')
myList.rotate(2)
print("After Rotation")
myList.printList()
print('\n')
myList.tail_to_head()
print("Tail to head Test:")
myList.printList()
